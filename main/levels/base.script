local MAP_HEIGHT = 1024
local MAP_WIDTH = 920
local BG_Y_RANGE = 561
debugdraw = require "debug-draw.debug-draw"


shared_table = require "main.shared_table"
-- local debugger = require('debugger.debugger')
-- debugger.start()

---@param self any
local function init_backgrounds(self, camera_id)
    self.bg_middle = {
        factory.create("factories#background_factory1"),
        factory.create("factories#background_factory2"),
        factory.create("factories#background_factory3")
    }
    self.bg_front = {
        factory.create("factories#background_factory1", vmath.vector3(0, BG_Y_RANGE * 2, 0)),
        factory.create("factories#background_factory2", vmath.vector3(0, BG_Y_RANGE * 2, 0)),
        factory.create("factories#background_factory3", vmath.vector3(0, BG_Y_RANGE * 2, 0))
    }
    self.bg_back = {
        factory.create("factories#background_factory1", vmath.vector3(0, -BG_Y_RANGE * 2, 0)),
        factory.create("factories#background_factory2", vmath.vector3(0, -BG_Y_RANGE * 2, 0)),
        factory.create("factories#background_factory3", vmath.vector3(0, -BG_Y_RANGE * 2, 0))
    }

    local camera_id = go.get_id("camera")
    local hero_id = self.hero_id

    self.bg_static = factory.create(
        "factories#background_factory0",
        nil,
        nil,
        {
            camera_id = camera_id,
            hero_id = hero_id
        }
    )
end

local function swap_backgrounds(self, dir, bg_level)
    if dir == vmath.vector3(0, 1, 0) then
        print("swap forward background")
        local bg_back_pos = go.get(self.bg_back[bg_level], "position")
        bg_back_pos.y = bg_back_pos.y + BG_Y_RANGE * 6
        go.set(self.bg_back[bg_level], "position", bg_back_pos)
        local bg_back = self.bg_back[bg_level]
        self.bg_back[bg_level] = self.bg_middle[bg_level]
        self.bg_middle[bg_level] = self.bg_front[bg_level]
        self.bg_front[bg_level] = bg_back
    elseif dir == vmath.vector3(0, -1, 0) then
        print("swap backward background")
        local bg_front_pos = go.get(self.bg_front[bg_level], "position")
        bg_front_pos.y = bg_front_pos.y - BG_Y_RANGE * 6
        go.set(self.bg_front[bg_level], "position", bg_front_pos)
        local bg_front = self.bg_front[bg_level]
        self.bg_front[bg_level] = self.bg_middle[bg_level]
        self.bg_middle[bg_level] = self.bg_back[bg_level]
        self.bg_back[bg_level] = bg_front
    end
end

function init(self)
    shared_table.add_value("hello")
    math.randomseed(os.time())
    self.hero_id = factory.create("factories#hero", vmath.vector3(1, 1, C.OBECTS_Z_INDEX), nil,
        { bullet_url = msg.url("factories#bullet"), explosion_url = msg.url("factories#explosion") }
    )
    msg.post("camera", "follow", {
        target = self.hero_id,
        lerp = 0.7,
        horizontal = true,
        vertical = true,
        immediate = true
    })
    msg.post(
        "camera",
        "bounds",
        { left = -MAP_WIDTH / 2, right = MAP_WIDTH / 2, bottom = -MAP_HEIGHT, top = MAP_HEIGHT * 10 }
    )
    local camera_id = go.get_id("camera")
    init_backgrounds(self, camera_id)

    -- creating some enemies just for testing
    for i = 0, 3 do
        local enemy_id = factory.create("factories#pirat",
            go.get_position(self.hero_id) + vmath.vector3(math.random(300, 600), math.random(300, 600), 0), nil,
            {
                hero_id = self.hero_id,
                bullet_url = msg.url("factories#enemy_bullet"),
                explosion_url = msg.url(
                    "factories#explosion")
            })
    end
    init_backgrounds(self)
end

function update(self)
    -- debugdraw.line(-MAP_HEIGHT, -MAP_HEIGHT, MAP_HEIGHT, MAP_HEIGHT)
    -- debugdraw.line(MAP_HEIGHT, -MAP_HEIGHT, -MAP_HEIGHT, MAP_HEIGHT)
    local player_pos = go.get(self.hero_id, "position")
    for i = 1, 3 do
        local bg_middle_pos = go.get(self.bg_middle[i], "position")
        if player_pos.y > bg_middle_pos.y + BG_Y_RANGE then
            swap_backgrounds(self, vmath.vector3(0, 1, 0), i)
        elseif player_pos.y < bg_middle_pos.y - BG_Y_RANGE then
            swap_backgrounds(self, vmath.vector3(0, -1, 0), i)
        end
    end
end

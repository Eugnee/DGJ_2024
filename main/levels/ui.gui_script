local DIALOGUE_OPENING = 0
local DIALOGUE_CLOSING = 1
local DIALOGUE_ON = 2
local DIALOGUE_OFF = 3
local d_state = DIALOGUE_OFF
local left_line = true
local end_game = false
local hero_id = "level1:/instance0"

shared_table = require "main.shared_table"
-- local debugger = require('debugger.debugger')
-- debugger.start()

shared_table.alter_value(2, 0)
shared_table.alter_value(4, 500)

local startup_dialogue = {
	"I must inform you to use WASD or Arrows for movement, T to communicate and space for shooting. Get the junk, sell it and be happy with yourself",
	"Yeah.. You tell me this everyday. I know the drill."
}

local pirate_dies0 = {
	"Noooo! This was my grandmother's ship!",
	"..."
}

local pirate_dies1 = {
	"And they call US pirates.",
	"You do steal games, don't you?"
}

local pirate_dies2 = {
	"Bloody controller, why did it need to stick?",
	"Was it Logitech F710?"
}

local pirate_dies3 = {
	"My gorgeous hair!",
	"Say hello to Davy Jones!"
}

local end_dialogue = {
	"Ok, I got away from those pirates! Let's see what we got..."
}

local dialogues = {
	startup_dialogue,
	pirate_dies0,
	pirate_dies1,
	pirate_dies2,
	pirate_dies3,
	end_dialogue
}

function init(self)
	print("UI initialized")
	self.left_line = gui.get_node("text_left")
	self.right_line = gui.get_node("text_right")
	self.max_switches = 3
	self.curr_swicth = 0
	self.start_left = true
	self.dialogue = dialogues[1]
end

function animate_end()
	if d_state == DIALOGUE_OPENING then
		d_state = DIALOGUE_ON
	elseif d_state == DIALOGUE_CLOSING then
		d_state = DIALOGUE_OFF
		-- send message second time to fully unlock player
		msg.post(hero_id, M.UNLOCK_DIALOGUE)
		if end_game then
			msg.post(M.GAME_CONTROLLER, "load_level", { level = 'level_done' })
		end
	end
	print("animate done")
end

function update(self, dt)
	local junk_score = gui.get_node("junk_score")
	local score = shared_table.get_value(2)
	gui.set_text(junk_score, tostring(score))


	local hp_display = gui.get_node("hp_display")
	local hp = shared_table.get_value(4)
	hp = math.floor(hp / 50) + 1
	if hp < 1 then
		hp = 1
	end
	gui.play_flipbook(hp_display, "hp_"..tostring(hp))
end

function on_message(self, message_id, message, sender)
	if message_id == hash("toggle_dialogue") then
		if d_state == DIALOGUE_OFF then
			local d_ui = gui.get_node("dialogue_ui")
			gui.animate(d_ui, "position.y", 300, gui.EASING_OUTSINE, 1.5, 0, animate_end)
			sound.play("#dialog_on")
			d_state = DIALOGUE_OPENING
			-- dialogue starts from left line
			self.dialogue = dialogues[message.dialogue_id]
			if message.dialogue_id == 6 then
				end_game = true
			end
			local char_right = gui.get_node("char_right")
			if message.dialogue_id > 1 and message.dialogue_id < 6 then
				anim_id = message.dialogue_id - 1
				gui.play_flipbook(char_right, "character_" .. tostring(anim_id))
			elseif message.dialogue_id == 1 then
				gui.play_flipbook(char_right, "character_3")
			end
			self.curr_switches = 1
			self.max_switches = message.max_switches
			self.start_left = message.hero_starts
			if self.start_left then
				gui.set_visible(self.left_line, true)
				gui.set_visible(self.right_line, false)
				left_line = false
				gui.set_text(self.left_line, self.dialogue[self.curr_switches])
			else
				gui.set_visible(self.left_line, false)
				gui.set_visible(self.right_line, true)
				left_line = true
				gui.set_text(self.right_line, self.dialogue[self.curr_switches])
			end
			self.block_input = false
		elseif d_state == DIALOGUE_ON then
			local d_ui = gui.get_node("dialogue_ui")
			sound.play("#dialog_off")
			gui.animate(d_ui, "position.y", 120, gui.EASING_OUTSINE, 1.5, 0, animate_end)
			d_state = DIALOGUE_CLOSING
			msg.post(M.GAME_CONTROLLER, hash("close_dialogue"))
		end
	elseif message_id == hash("next_line") and d_state == DIALOGUE_ON then
		if self.curr_switches >= self.max_switches then
			msg.post(".", "toggle_dialogue")
			self.curr_switches = 0
			self.block_input = true
		else
			self.curr_switches = self.curr_switches + 1
			if left_line then
				gui.set_visible(self.left_line, true)
				gui.set_visible(self.right_line, false)
				gui.set_text(self.left_line, self.dialogue[self.curr_switches])
				left_line = false
			else
				gui.set_visible(self.left_line, false)
				gui.set_visible(self.right_line, true)
				gui.set_text(self.right_line, self.dialogue[self.curr_switches])
				left_line = true
			end
		end
	end
end

function on_input(self, action_id, action)
	if self.block_input then
		return
	end
	if ((action_id == C.TALK or action_id == C.FIRE or action_id == hash("touch")) and action.pressed) then
		msg.post(".", "next_line")
	end
end

go.property("hp", 500)
go.property("speed", 300)
go.property("damage", 50)
go.property("bullet_speed", 900)
go.property("bullet_url", msg.url())
go.property("explosion_url", msg.url())

go.property("angular_speedup", 2)
go.property("angular_max_speed", 10)

go.property("forward_speedup", 200)
go.property("forward_max_speed", 200)

go.property("player_score", 0)

--local debugger = require('debugger.debugger')
--debugger.start()

local shared_table = require "main.shared_table"

local Animate = require "main.lib.animation"
local Position = require "main.lib.position"
local Utils = require "main.lib.utils"

local IDLE_ANIM = hash("idle")
local ATTACK_ANIM = hash("attack")
local DAMAGED_ANIM = hash("damaged")

local DIRECTION_VEC = vmath.vector3(0, 0, 0)

---@class Hero : AnimatedObj
---@field direction vector3
---@field inertia_direction vector3
---@field current_animation hash|nil
---@field correction vector3
---@field attacking bool
---@field locked_anim bool
---@field max_hp integer
---@field hp integer
---@field is_moved bool
---@field speed integer
---@field acceleration_count integer
---@field inertia_acceleration integer
---@field inertia_count float
---@field run_inertia bool
---@field angular_velocity integer
---@field bullet_url url
---@field bullet_speed integer
---@field damage integer
---@field engine_sound bool
---@field engine_sound_file url

---@param self Hero
function init(self)
    msg.post(C.SPRITE_DAMAGED, M.DISABLE)
    msg.post(C.SPRITE_FIRE_FRONT, M.DISABLE)
    msg.post(C.SPRITE_FIRE_SIDE_LEFT, M.DISABLE)
    msg.post(C.SPRITE_FIRE_SIDE_RIGHT, M.DISABLE)
    msg.post(".", "acquire_input_focus")
    self.direction = vmath.vector3()
    self.inertia_direction = vmath.vector3()
    self.current_animation = nil
    self.correction = vmath.vector3()
    self.attacking = false
    self.locked_anim = false
    self.max_hp = self.hp
    self.is_moved = false


    self.speed = 0
    self.acceleration = 0

    -- front looking "up" 
    self.front = vmath.vector3(0, 1, 0)
    self.inertia_dir = vmath.vector3(0, 1, 0)

	self.front_last_movement = vmath.vector3()
	self.front_acc_inverted = false

    self.side_velocity = vmath.vector3()
	self.side_last_movement = vmath.vector3()
	self.side_acceleration = vmath.vector3()
	self.side_acc_inverted = false
    self.last_side_sign = 1

    shared_table.alter_value(1, go.get_rotation())
    self.engine_sound_file = msg.url("/base/sounds#hero_engine")
    sound.set_gain(self.engine_sound_file, 0)
    sound.play(self.engine_sound_file)
end

function final()
    msg.post(".", "release_input_focus")
end

--@param hp number
local function set_hp(self, hp)
    self.hp = hp
    -- msg.post("/gui#ingame", M.CHANGE_HP_BAR, { hp = hp, max_hp = self.max_hp })
    shared_table.alter_value(shared_table.HERO_HP, self.hp)
end

local function take_damage(self, hp)
    if self.hp <= 0 then
        return
    end
    local hp = self.hp - hp
    set_hp(self, hp)
    -- msg.post("/ui", "change_hero_hp", { hp = self.hp, max_hp = self.max_hp })
    msg.post(C.SPRITE_DAMAGED, M.ENABLE)
    sprite.play_flipbook(C.SPRITE_DAMAGED, DAMAGED_ANIM, function()
        msg.post(C.SPRITE_DAMAGED, M.DISABLE)
    end)
    Animate.play_animation(self, C.SPRITE, DAMAGED_ANIM, true, function()
        Animate.play_animation(self, C.SPRITE, IDLE_ANIM)
        msg.post(C.SPRITE_DAMAGED, M.DISABLE)
    end)
    msg.post(M.SOUND_GATE, M.PLAY_SOUND, { sound = "/base/sounds#hero_damaged", gate_time = 0.1 })
    if self.hp <= 0 then
        msg.post(M.GAME_CONTROLLER, "load_level", { level = 'level_done' })
        -- msg.post("/main#main", M.GAME_OVER)
    end
end

function increase_hp(self, hp)
    local new_hp = self.hp + hp
    if new_hp > 500 then
        new_hp = 500
    end
    set_hp(self, new_hp)
end

---@param self Hero
local function spawn_bullet(self)
    local pos = go.get_position()
    pos.z = C.OBECTS_Z_INDEX - 0.01
    factory.create(self.bullet_url, pos, go.get_rotation(),
        { damage = self.damage, speed = self.bullet_speed + self.speed, explosion_url = self.explosion_url })
    msg.post(M.SOUND_GATE, M.PLAY_SOUND, { sound = "/base/sounds#hero_shoot", gate_time = 0.1 })
    self.attacking = false
    self.current_anim = nil
end

local function move_inert(self, dt, velocity_vector)
    local pos = go.get_position()
    pos = pos + velocity_vector * dt
    if check_if_in_bounds(pos) then
        Position.set_iso_position(pos, C.OBECTS_Z_INDEX)
        msg.post(
            shared_table.get_value(shared_table.CURR_STATIC_BG_NAME),
            M.BACKGROUND_POSITION_UPDATE,
            { player_pos = pos }
        )
    end
end

local function move_front(self, dt, velocity_vector)
    move_inert(self, dt, velocity_vector)
end

local function rotate_side(self, dt, angular_velocity)
    local rotation = go.get_rotation()
    rotation = rotation * vmath.quat_rotation_z(angular_velocity * dt)
    self.front = vmath.rotate(rotation, vmath.vector3(0, 1, 0))
    go.set_rotation(rotation)
end

---@param self Hero
---@param dt float

local game_ended = false

---@param self Hero
---@param dt float
function update(self, dt)
    -- print("speed is", self.speed)
    local rotation = go.get_rotation()
    shared_table.alter_value(shared_table.HERO_ROTATION, rotation)
    -- local pos = go.get_position()
    -- if pos.y > 10000 and not game_ended then
    --     -- level ended
    --     msg.post(M.GAME_CONTROLLER, hash("toggle_dialogue"),
    --         { dialogue_id = 6, max_switches = 1, hero_starts = true })
    --     game_ended = true
    --     return
    -- end
    if self.acceleration_count == self.speed / 10 then
        -- if movement starts
        msg.post(M.SOUND_GATE, M.PLAY_SOUND, { sound = "/base/sounds#hero_engine_start" })
    end
    if self.direction.x ~= 0 then
        if self.direction.x > 0 then
            msg.post(C.SPRITE_FIRE_SIDE_LEFT, M.DISABLE)
            msg.post(C.SPRITE_FIRE_SIDE_RIGHT, M.ENABLE)
        else
            msg.post(C.SPRITE_FIRE_SIDE_RIGHT, M.DISABLE)
            msg.post(C.SPRITE_FIRE_SIDE_LEFT, M.ENABLE)
        end
    else
        msg.post(C.SPRITE_FIRE_SIDE_RIGHT, M.DISABLE)
        msg.post(C.SPRITE_FIRE_SIDE_LEFT, M.DISABLE)
    end
    if self.direction.y ~= 0 then
        msg.post(C.SPRITE_FIRE_FRONT, M.ENABLE)
    else
        msg.post(C.SPRITE_FIRE_FRONT, M.DISABLE)
    end

    if not self.engine_sound then
        self.engine_sound = true
        sound.set_gain(self.engine_sound_file, 0.5)
    end
    -- msg.post(M.SOUND_GATE, M.PLAY_SOUND, { gate_time = 4.5, sound = "/base/sounds#hero_engine" })
    if self.engine_sound then
        self.engine_sound = false
        sound.set_gain("/base/sounds#hero_engine", 0)
    end
    -- -- end
    if self.attacking then
        Animate.play_animation(self, C.SPRITE, ATTACK_ANIM, false, spawn_bullet)
        -- spawn_bullet(self)
    end
    -- -- anim = Animate.get_anim_name_by_direction("hero", vmath.normalize(self.cursor_pos - pos))

    -- local input = vmath.vector3()
    -- input.y = self.direction.y

    -- forward movement
    if self.is_moved then
        -- self.front_acceleration = input * self.forward_speedup * <current front direction>
        self.acceleration = self.forward_speedup
        self.inertia_dir = self.front
    elseif self.speed > 0 then
        -- else: check, if speed is > 0. add negative acceleration in such case.
        self.acceleration = -self.forward_speedup
        if self.direction.y == -1 then
            self.acceleration = self.acceleration * 2
        end
    else
        -- make sure speed is 0
        self.speed = 0
    end


    -- get last acceleration dir. if dir changes, then 

    -- passed distance consists of 2 parts: part, that was passed with previous speed
    -- here we move using both previous velocity and inertia_rotation. This is "inertia" component, we should apply fade to it
    move_inert(self, dt, self.inertia_dir * self.speed)

    if self.direction.x ~= 0 then
        if self.direction.y == -1 then
            rotate_side(self, dt * 5, self.direction.x)
        else
            rotate_side(self, dt * 3, self.direction.x)
        end
    end
    -- distance, that was passed w.r.t. increased velocity
    -- here we move accelerated (if acc > 0) and w updated rotation
    local acc_speed = self.acceleration * dt * 0.5
    move_front(self, dt, self.front * acc_speed)
    
    -- if self.is_moved then
    --     print("front, inertia:", self.front, self.inertia_dir)
    -- end
    -- if acc > 0, should we set inertia_rotaton = go.rotation?

    -- we do need to update speed with new value
    self.speed = self.speed + self.acceleration * dt
    -- max speed limit
    if self.speed > 800 then
        self.speed = 800
    end

    self.direction = vmath.vector3(0, 0, 0)
    self.acceleration = 0
    self.is_moved = false;
end

---@param self any
---@param action_id hash
---@param action {pressed: bool, x: number, y: number}
function on_input(self, action_id, action)
    if shared_table.get_value(shared_table.DISABLE_HERO_INPUT) then
        return
    end

    if action_id == C.LEFT then
        -- self.is_moved = true
        self.direction.x = 1
    elseif action_id == C.RIGHT then
        -- self.is_moved = true
        self.direction.x = -1
    elseif action_id == C.UP then
        self.is_moved = true
        self.direction.y = 1
    elseif action_id == C.DOWN then
        self.direction.y = -1
    elseif
        action.pressed 
        and action_id == C.FIRE
        and not self.attacking
    then
        self.attacking = true
    end
end

function on_message(self, message_id, message, sender)
    if message_id == M.CONTACT_POINT_RESPONSE and (message.other_group == C.ENEMY) then
        Position.correct_position(self, message)
    elseif message_id == M.MAKE_DAMAGE then
        take_damage(self, message.hp)
        return
    elseif message_id == M.SCORE then
        self.player_score = self.player_score + message.score
        shared_table.alter_value(shared_table.HERO_JUNK_SCORE, self.player_score)
    elseif message_id == M.INCREASE_HP then
        increase_hp(self, message.hp)
    end
end

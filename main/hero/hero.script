go.property("hp", 500)
go.property("speed", 300)
go.property("damage", 50)
go.property("bullet_speed", 900)
go.property("bullet_url", msg.url())
go.property("explosion_url", msg.url())
go.property("angular_velocity", 2)
go.property("player_score", 0)

-- local debugger = require('debugger.debugger')
-- debugger.start()

shared_table = require "main.shared_table"

local Animate = require "main.lib.animation"
local Position = require "main.lib.position"
local Utils = require "main.lib.utils"

local IDLE_ANIM = hash("idle")
local ATTACK_ANIM = hash("attack")
local DAMAGED_ANIM = hash("damaged")

local DIRECTION_VEC = vmath.vector3(0, 0, 0)

---@class Hero : AnimatedObj
---@field direction vector3
---@field inertia_direction vector3
---@field current_animation hash|nil
---@field correction vector3
---@field attacking bool
---@field locked_anim bool
---@field max_hp integer
---@field hp integer
---@field is_moved bool
---@field speed integer
---@field acceleration_count integer
---@field inertia_acceleration integer
---@field inertia_count float
---@field run_inertia bool
---@field angular_velocity integer
---@field bullet_url url
---@field bullet_speed integer
---@field damage integer
---@field engine_sound bool
---@field engine_sound_file url

---@param self Hero
function init(self)
    msg.post(C.SPRITE_DAMAGED, M.DISABLE)
    msg.post(C.SPRITE_FIRE_FRONT, M.DISABLE)
    msg.post(C.SPRITE_FIRE_SIDE_LEFT, M.DISABLE)
    msg.post(C.SPRITE_FIRE_SIDE_RIGHT, M.DISABLE)
    msg.post(".", "acquire_input_focus")
    self.direction = vmath.vector3()
    self.inertia_direction = vmath.vector3()
    self.current_animation = nil
    self.correction = vmath.vector3()
    self.attacking = false
    self.locked_anim = false
    self.max_hp = self.hp
    self.is_moved = false
    self.acceleration_count = self.speed / 10
    self.inertia_acceleration = self.acceleration_count
    self.inertia_count = self.speed
    shared_table.add_value(self.direction)
    shared_table.add_value(0)
    shared_table.add_value(0)
    shared_table.add_value(500)
    self.engine_sound_file = msg.url("/base/sounds#hero_engine")
    sound.set_gain(self.engine_sound_file, 0)
    sound.play(self.engine_sound_file)
end

function final()
    msg.post(".", "release_input_focus")
end

--@param hp number
local function set_hp(self, hp)
    self.hp = hp
    -- msg.post("/gui#ingame", M.CHANGE_HP_BAR, { hp = hp, max_hp = self.max_hp })
    print("HP: ", hp)
    shared_table.alter_value(4, self.hp)
end

local function take_damage(self, hp)
    local hp = self.hp - hp
    set_hp(self, hp)
    -- msg.post("/ui", "change_hero_hp", { hp = self.hp, max_hp = self.max_hp })
    msg.post(C.SPRITE_DAMAGED, M.ENABLE)
    sprite.play_flipbook(C.SPRITE_DAMAGED, DAMAGED_ANIM, function()
        msg.post(C.SPRITE_DAMAGED, M.DISABLE)
    end)
    Animate.play_animation(self, C.SPRITE, DAMAGED_ANIM, true, function()
        Animate.play_animation(self, C.SPRITE, IDLE_ANIM)
        msg.post(C.SPRITE_DAMAGED, M.DISABLE)
    end)
    msg.post(M.SOUND_GATE, M.PLAY_SOUND, { sound = "/base/sounds#hero_damaged", gate_time = 0.1 })
    if self.hp <= 0 then
        msg.post(M.GAME_CONTROLLER, "load_level", { level = 'level_done' })
        -- msg.post("/main#main", M.GAME_OVER)
    end
end

---@param self Hero
local function spawn_bullet(self)
    local pos = go.get_position()
    pos.z = C.OBECTS_Z_INDEX - 0.01
    factory.create(self.bullet_url, pos, go.get_rotation(),
        { damage = self.damage, speed = self.bullet_speed, explosion_url = self.explosion_url })
    msg.post(M.SOUND_GATE, M.PLAY_SOUND, { sound = "/base/sounds#hero_shoot", gate_time = 0.1 })
    self.attacking = false
    self.current_anim = nil
end

---@param self Hero
---@param dt float
local function simple_inertia(self, dt)
    if self.inertia_count < self.speed then
        if self.inertia_count == 0.9 then
            msg.post(M.SOUND_GATE, M.PLAY_SOUND, { sound = "/base/sounds#hero_engine_stab" })
        end
        local rotation = go.get_rotation()
        if self.inertia_direction.x ~= 0 then
            local ang = self.inertia_direction.x * dt / self.inertia_count / self.inertia_acceleration
            rotation = rotation * vmath.quat_rotation_z(self.angular_velocity * ang)
            go.set_rotation(rotation)
        end
        if self.inertia_direction.y ~= 0 then
            local distance = self.speed / self.inertia_count / self.inertia_acceleration * dt
            local pos = go.get_position()
            DIRECTION_VEC.y = distance
            local direction = vmath.rotate(rotation, DIRECTION_VEC)
            pos = pos + direction
            Position.set_iso_position(pos, C.OBECTS_Z_INDEX)
        end
        self.inertia_count = self.inertia_count + 0.05
        return
    end
end

local game_ended = false

---@param self Hero
---@param dt float
function update(self, dt)
    local rotation = go.get_rotation()
    shared_table.alter_value(1, rotation)
    if self.is_moved then
        local pos = go.get_position()
        if pos.y > 10000 and not game_ended then
            print("sending endgame dialogue")
            -- level ended
            msg.post(M.GAME_CONTROLLER, hash("toggle_dialogue"),
                { dialogue_id = 6, max_switches = 1, hero_starts = true })
            game_ended = true
            return
        end
        if self.acceleration_count == self.speed / 10 then
            -- if movement starts
            msg.post(M.SOUND_GATE, M.PLAY_SOUND, { sound = "/base/sounds#hero_engine_start" })
        end
        if self.direction.x ~= 0 then
            if self.direction.x > 0 then
                msg.post(C.SPRITE_FIRE_SIDE_LEFT, M.DISABLE)
                msg.post(C.SPRITE_FIRE_SIDE_RIGHT, M.ENABLE)
            else
                msg.post(C.SPRITE_FIRE_SIDE_RIGHT, M.DISABLE)
                msg.post(C.SPRITE_FIRE_SIDE_LEFT, M.ENABLE)
            end
            rotation = rotation *
                vmath.quat_rotation_z(self.angular_velocity * self.direction.x * dt / self.acceleration_count)
            go.set_rotation(rotation)
            self.acceleration_count = Utils.decrement(self.acceleration_count, 1, 1)
        else
            msg.post(C.SPRITE_FIRE_SIDE_RIGHT, M.DISABLE)
            msg.post(C.SPRITE_FIRE_SIDE_LEFT, M.DISABLE)
        end
        if self.direction.y ~= 0 then
            msg.post(C.SPRITE_FIRE_FRONT, M.ENABLE)
            local distance = (self.speed / self.acceleration_count) * dt
            DIRECTION_VEC.y = distance
            local direction = vmath.rotate(rotation, DIRECTION_VEC)
            pos = pos + direction
            if check_if_in_bounds(pos) then
                Position.set_iso_position(pos, C.OBECTS_Z_INDEX)
            end
            self.acceleration_count = Utils.decrement(self.acceleration_count, 1, 1)
        else
            msg.post(C.SPRITE_FIRE_FRONT, M.DISABLE)
        end
        self.inertia_count = self.speed
        self.run_inertia = true
        self.inertia_acceleration = self.acceleration_count
        self.inertia_direction.x = self.direction.x
        self.inertia_direction.y = self.direction.y
        if not self.engine_sound then
            self.engine_sound = true
            sound.set_gain(self.engine_sound_file, 0.5)
        end
        -- msg.post(M.SOUND_GATE, M.PLAY_SOUND, { gate_time = 4.5, sound = "/base/sounds#hero_engine" })
    else
        self.acceleration_count = self.speed / 10
        if self.run_inertia then
            self.run_inertia = false
            self.inertia_count = 0.9
            msg.post(C.SPRITE_FIRE_FRONT, M.DISABLE)
            msg.post(C.SPRITE_FIRE_SIDE_LEFT, M.DISABLE)
            msg.post(C.SPRITE_FIRE_SIDE_RIGHT, M.DISABLE)
        end
        if self.engine_sound then
            self.engine_sound = false
            sound.set_gain("/base/sounds#hero_engine", 0)
        end
    end
    if self.attacking then
        Animate.play_animation(self, C.SPRITE, ATTACK_ANIM, false, spawn_bullet)
    end
    -- anim = Animate.get_anim_name_by_direction("hero", vmath.normalize(self.cursor_pos - pos))

    simple_inertia(self, dt)
    self.direction.x = 0
    self.direction.y = 0
    self.correction.x = 0
    self.correction.y = 0
    self.is_moved = false;
end

---@param self any
---@param action_id hash
---@param action {pressed: bool, x: number, y: number}
function on_input(self, action_id, action)
    if action_id == C.LEFT then
        self.is_moved = true
        self.direction.x = 1
    elseif action_id == C.RIGHT then
        self.is_moved = true
        self.direction.x = -1
    elseif action_id == C.UP then
        self.is_moved = true
        self.direction.y = 1
    elseif
        action_id == C.FIRE
        and not self.attacking
    then
        self.attacking = true
    end
end

function on_message(self, message_id, message, sender)
    if message_id == M.CONTACT_POINT_RESPONSE and (message.other_group == C.ENEMY) then
        Position.correct_position(self, message)
    elseif message_id == M.MAKE_DAMAGE then
        take_damage(self, message.hp)
        return
    elseif message_id == M.SCORE then
        self.player_score = self.player_score + message.score
        print("player_score: " .. tostring(self.player_score))
        shared_table.alter_value(2, self.player_score)
    end
end
